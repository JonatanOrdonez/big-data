{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Se tienen en total: 1797 imágenes\n",
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       1.00      1.00      1.00        35\n",
      "          1       0.94      1.00      0.97        46\n",
      "          2       0.97      1.00      0.99        33\n",
      "          3       0.98      0.96      0.97        46\n",
      "          4       1.00      0.95      0.97        19\n",
      "          5       1.00      0.98      0.99        47\n",
      "          6       1.00      1.00      1.00        40\n",
      "          7       0.94      1.00      0.97        34\n",
      "          8       0.97      0.86      0.91        37\n",
      "          9       0.96      1.00      0.98        23\n",
      "\n",
      "avg / total       0.98      0.97      0.97       360\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# https://stackabuse.com/k-nearest-neighbors-algorithm-in-python-and-scikit-learn/\n",
    "from sklearn import neighbors, datasets, model_selection, metrics\n",
    "import pylab as pl\n",
    "\n",
    "digits = datasets.load_digits() # se guardan los numeros en una variable\n",
    "numImagenes = len(digits.images) # Numero de imagenes, len es un método que provee el tamaño del arreglo\n",
    "print(\"Se tienen en total:\", numImagenes, \"imágenes\")\n",
    "y = digits.target # el método nos provee las etiquetas de las imágenes en un arreglo\n",
    "x = digits.images.reshape((numImagenes, -1)) # se reducen las dimensiones\n",
    "\n",
    "# y = [] # inicializamos un arreglo donde se almacenan las etiquetas de las imágenes que son 4 o 6\n",
    "# x = [] # inicializamos un arreglo donde se almacenan las imágenes que corresponden a las etiquedas de 4 o 6\n",
    "# for i in range(0, len(digits.target)):\n",
    "    # if yy[i] == 4 or yy[i] == 6:\n",
    "        # x.append(xx[i])\n",
    "        # y.append(yy[i])\n",
    "\n",
    "ts = 0.20 # porcentaje de datos utilizados para pruebas\n",
    "x_train, x_test, y_train, y_test = model_selection.train_test_split(x, y, test_size=ts) # obtenemos el x de prueba & y de prueba 20%\n",
    "\n",
    "knn = neighbors.KNeighborsClassifier(n_neighbors=10) # Creamos una instancia de Neighbours Classifier\n",
    "knn.fit(x_train, y_train) # Generamos el modelo con los datos y resultados de entrenamiento\n",
    "\n",
    "y_pred = knn.predict(x_test) # realizamos una predicción para el x & y de prueba\n",
    "\n",
    "class_report = metrics.classification_report(y_test, y_pred) # reporte de predicción\n",
    "\n",
    "print(class_report)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
